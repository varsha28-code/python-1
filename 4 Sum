class Solution:
    def fourSum(self, arr, target):
        arr.sort()
        res, quad = [], []

        def kSum(k, start, target):
            # Base case: 2-sum
            if k != 2:
                for i in range(start, len(arr) - k + 1):
                    if i > start and arr[i] == arr[i - 1]:
                        continue
                    quad.append(arr[i])
                    kSum(k - 1, i + 1, target - arr[i])
                    quad.pop()
                return

            # 2-sum part (two-pointer)
            l, r = start, len(arr) - 1
            while l < r:
                s = arr[l] + arr[r]
                if s < target:
                    l += 1
                elif s > target:
                    r -= 1
                else:
                    res.append(quad + [arr[l], arr[r]])
                    l += 1
                    # Skip duplicates
                    while l < r and arr[l] == arr[l - 1]:
                        l += 1

        kSum(4, 0, target)
        return res
